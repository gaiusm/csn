# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_csn', [dirname(__file__)])
        except ImportError:
            import _csn
            return _csn
        if fp is not None:
            try:
                _mod = imp.load_module('_csn', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _csn = swig_import_helper()
    del swig_import_helper
else:
    import _csn
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class netid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, netid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, netid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ip"] = _csn.netid_ip_set
    __swig_getmethods__["ip"] = _csn.netid_ip_get
    if _newclass:ip = _swig_property(_csn.netid_ip_get, _csn.netid_ip_set)
    __swig_setmethods__["port"] = _csn.netid_port_set
    __swig_getmethods__["port"] = _csn.netid_port_get
    if _newclass:port = _swig_property(_csn.netid_port_get, _csn.netid_port_set)
    def __init__(self): 
        this = _csn.new_netid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csn.delete_netid
    __del__ = lambda self : None;
netid_swigregister = _csn.netid_swigregister
netid_swigregister(netid)

CsnTxReady = _csn.CsnTxReady
CsnRxReady = _csn.CsnRxReady
CsnTimeout = _csn.CsnTimeout
CsnOk = _csn.CsnOk
CsnNoHeap = _csn.CsnNoHeap
CsnIllegalNetId = _csn.CsnIllegalNetId
CsnUnitializedTransport = _csn.CsnUnitializedTransport
CsnNetIdAlreadyRegistered = _csn.CsnNetIdAlreadyRegistered
CsnOverrun = _csn.CsnOverrun

def csn_open(*args):
  return _csn.csn_open(*args)
csn_open = _csn.csn_open

def csn_close(*args):
  return _csn.csn_close(*args)
csn_close = _csn.csn_close

def csn_registername(*args):
  return _csn.csn_registername(*args)
csn_registername = _csn.csn_registername

def csn_lookupname(*args):
  return _csn.csn_lookupname(*args)
csn_lookupname = _csn.csn_lookupname

def csn_tx(*args):
  return _csn.csn_tx(*args)
csn_tx = _csn.csn_tx

def csn_rx(*args):
  return _csn.csn_rx(*args)
csn_rx = _csn.csn_rx

def txnb(*args):
  return _csn.txnb(*args)
txnb = _csn.txnb

def rxnb(*args):
  return _csn.rxnb(*args)
rxnb = _csn.rxnb

def csn_test(*args):
  return _csn.csn_test(*args)
csn_test = _csn.csn_test

def csn_nameserver(*args):
  return _csn.csn_nameserver(*args)
csn_nameserver = _csn.csn_nameserver

def csn_resolvconf(*args):
  return _csn.csn_resolvconf(*args)
csn_resolvconf = _csn.csn_resolvconf
# This file is compatible with both classic and new-style classes.


